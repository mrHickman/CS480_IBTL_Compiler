'''
Created on Feb 5, 2014

@author: mr_hickman
'''

from token import Token # ?
from lexicalAnalyzer import LexicalAnalyzer
from parseTree import ParseTree 

# addNode() gets next token and adds Node to tree

class Parser :
    def __init__(self, lexAnalyzer):
        self.tokenList = lexAnalyzer.tokenList
        if len(self.tokenList) > 1 :
            self.currenToken = self.tokenList[0]
            self.peakToken = self.tokenList[1]
        self.tokenIndx = 1
        self.parseTree = ''
        
    def T(self):
        if self.currentToken == '[' :
            self.S()
            if self.currentToken == ']' :
                return
            else :
                self.error()
        else :
            self.error()
        
    def S(self):
        if self.currentToken == '[' :
            self.getNextToken()
            if self.currentToken == ']' :
                self.getNextToken()
                self.Sp()
            elif self.currentToken == '[' :
                self.getNextToken()
                self.S()
                if self.currentToken == ']' :
                    self.getNextToken()
                    self.Sp()
                else :
                    self.error()
            elif self.currentToken.type == 'statement' :
                self.statement()
                self.Sp()
            elif self.currentToken.type == oper :
                self.oper()
                self.Sp()
            else :
                self.error()
        elif self.currentToken.type == string or int or float or name :
            self.oper()    
            self.Sp()
        else :
            self.error()
            
    def Sp(self):
        if self.currentToken == '[' or self.currentToken.type == string or int or float or name :
            self.S()
            self.Sp()
        # the else statement of this is epsilon
        
    def expr(self):
        if self.currentToken == '[' :
            self.getNextToken()
            if self.currentToken.type == statement :
                self.statement()
            elif self.currentToken.type == oper :
                self.oper()
            else :
                self.error()
        elif self.currentToken.type == string or int or float or name :
            self.oper()
        else :
            self.error()
            
    def statement(self):
        if self.currentToken.value == 'if' :
            self.getNextToken()
            self.expr()
            self.expr()
            if self.currentToken == ']' :
                self.getNextToken()
            else :
                self.expr()
                if self.currentToken == ']' :
                    self.getNextToken()
                else :
                    self.error()
        elif self.currentToken.value == 'while' :
            self.getNextToken()
            self.expr()
            self.exprlist()
            if self.currentToken == ']' :
                self.getNextToken()
            else :
                self.error()
        elif self.currentToken.value == 'let' :
            self.getNextToken()
            if self.currentToken == '[' :
                self.getNextToken()
                self.varlist()
                if self.currentToken == ']' :
                    self.getNextToken()
                else :
                    self.error()
            else :
                self.error()
        elif self.currentToken.value == 'stdout' :
            self.getNextToken()
            self.oper()
            if self.currentToken == ']' :
                self.getNextToken()
            else :
                self.error()
        else:
            self.error()
            
    def oper(self):
        if self.currentToken.type == string or int or float or name :
            self.termOper()
        else :
            self.nonTermOper()
    
    def termOper(self):
        self.addTermNode()
        
    def nonTermOper(self):
        if self.currentToken.type == binop :
            self.binop()
        elif self.currentToken.type == unop :
            self.unop()
        elif self.currentToken.type == op :
            self.op()
        elif self.currentToken.type == assign :
            self.assign()
        else :
            self.error()
            
    def binop(self):
        self.addNonTermNode()
        self.oper()
        self.oper()
        if self.currentToken.value == ']' :
            self.getNextToken()
        else :
            self.error()
            
    def unop(self):
        self.addNonTermNode()
        self.oper()
        if self.currentToken.value == ']' :
            self.getNextToken()
        else :
            self.error()
            
    def op(self):
        self.addNonTermNode()
        self.oper()
        if self.currentToken.value == ']' :
            self.getNextToken()
        else :
            self.oper()
            if self.currentToken.value == ']' :
                self.getNextToken()
            else :
                self.error()
            
    def assign(self):
        self.addNonTermNode()
        if self.currentToken.type == name :
            self.addTermNode()
            self.oper()
            if self.currentToken.type == ']' :
                self.getNextToken()
            else :
                self.error()
        else :
            self.error()
        
    def exprlist(self):
        self.expr()
        if self.currentToken.value != ']' :
            self.exprlist()
    
    def varlist(self):
        if self.currentToken.type == name :
            self.addTermNode()
            if self.currentToken.type == 'type' :
                self.addTermNode()
                if self.currentToken.value == ']' :
                    self.getNextToken()
                else :
                    self.error()
            else :
                self.error()
        else :
            self.error()
        if self.currentToken.value != ']' :
            self.varlist()
        
    def addNonTermNode(self):
        #add node to tree
        #current node to node
        #get next token
    def addTermNode(self):
        #add node to tree
        #get next token
    def getNextToken(self):
        #set current token to peak
        #set peak to next
        #int list index
    def error(self):
        