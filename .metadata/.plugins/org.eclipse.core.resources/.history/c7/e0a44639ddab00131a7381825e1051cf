'''
Created on Feb 27, 2014

@author: mr_hickman
'''

class ParserGForthOutput:
    '''
    classdocs
    '''
    
    def __init__(self, parseTree):

        self.parseTree = parseTree
        self.currentNode = ''
        self.peakNode = self.parseTree.getNextLeftMostNode()
        self.getNextNode()
        self.gForth = ''
        self.generateGForth()
        
        print self.gForth
        
    
    def getNextNode(self):
        self.currentNode =  self.peakNode
        self.peakNode = self.parseTree.getNextLeftMostNode()
    
    def generateGForth(self):
        myRoot = self.parseTree.getRoot()
        children = myRoot.children
        letTrees = []
        for x in range(0, len(children)):
            print myRoot.getChild(x).getValue()
            if myRoot.getChild(x).getValue() == 'let' :
                letTrees.append(x)
        if len(letTrees) > 0 and letTrees[0] == 0 :

            self.printLets() #add the variable assignments here
            print 'me'
            print self.currentNode.getValue()
            print self.currentNode.getType()
            
        self.gForth += ': prgm '
        while self.peakNode:
            if len(letTrees) > 0 and self.parseTree.currentChild[0] in letTrees : # is in letTrees
                self.gforth += '; \n prgm \n'
                self.printLets()
                if self.peakNode and self.parseTree.currentChild[0] in letTrees :
                    continue
                elif self.peakNode :
                    self.gforth += ': prgm '
                else :
                    break
            self.gForth += self.currentNode.getValue() + ' '
            self.getNextNode()
        self.gforth += '; \n prgm \n' # may need to switch to \r

    def printLets(self):
        self.gForth += '\n'
        while True :
            if self.currentNode.getType() == 'name':
                tempString = ''
                tempString += self.currentNode.getValue() + ' '
                self.getNextNode()
                print self.currentNode.getValue()
                if self.currentNode.getValue() == 'int' or self.currentNode.getValue() == 'bool' :
                    self.gForth += 'variable ' + tempString
                    self.getNextNode()
                elif self.currentNode.getValue() == 'float' :
                    self.gForth += 'fvariable ' + tempString
                    self.getNextNode()
                elif self.currentNode.getValue() == 'string' :
                    self.gForth += 'create ' + tempString + ' 1024 chars allot '
                else: 
                    self.error()
                    break
            else:
                self.gForth += '\n'
                self.getNextNode()
                break
        
            
    def error(self):
        print 'ERRROR'
                    
        
        