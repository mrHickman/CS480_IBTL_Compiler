from parseTree import ParseTree
from operationType import OperationType

class TypeChecker:
    def __init__(self, parseTree):
        self.ParseTree = parseTree
        self.currentNode = ''
#         self.nodeStack = []
#         self.nodeStack.append(self.ParseTree.getNextLeftMostNode())
        self.childCountStack = []
        self.typeStack = []
        self.getNextNode()
        self.checkType()
        
    def checkType(self):
        while not self.currentNode.getParent() : # current will be the root at fail
            while self.isTypeTerminal() and not self.currentNode.getParent() :
                self.getNextNode()
            if not self.currentNode.getParent() :
                return #At Root Node
            possParam = OperationType[self.currentNode.getToken().getValue()]
            for x in range(0, len(possParam)) :
                
            
            #the last node will all ways be the root node
            #add break condition
                
    def isTypeTerminal(self):
        tempType = self.typeStack[-1]  
        if tempType == 'bool' or tempType == 'int' or  tempType == 'float' or tempType == 'string' or tempType == 'name':
            return True
        else :
            return False
        
    def getNextNode(self):
        self.currentNode = self.ParseTree.getNextLeftMostNode()
        self.childCountStack.append(self.currentNode.getChildCount())
        self.typeStack.append(self.currentNode.getToken().getType())
    
    def pop(self, returnType):
        argumentCount = self.childCountStack[-1]
        for x in range(0, argumentCount) :
            self.childCountStack.pop()
            self.typeStack.pop()
        
        if returnType :
            self.typeStack.append(returnType)
            self.childCountStack.append(0)
        
    def getScopeNode(self):
        currentScopeNode = self.currentNode
        parentNode = currentScopeNode.getParent()
        while parentNode != self.ParseTree.getRoot() :
            currentScopeNode = parentNode
            parentNode = currentScopeNode.getParent()
        return currentScopeNode
    
    def convertScopeToFloat(self):
        tempTree = ParseTree(self.getScopeNode())
        currentNode = tempTree.getNextLeftMostNode()
        while currentNode != tempTree.getRoot():
            if currentNode.getToken().getType() == 'int':
                tempTree.injectType('float')            
            currentNode = tempTree.getNextLeftMostNode()
        
        for x in range (0, len(self.typeStack)) :
            if self.typeStack[x] == 'int':
                self.typeStack[x]  = 'float'
