'''
Created on Jan 25, 2014

@author: mr_hickman

Description:
    Hosts the main function for the compiler, requires an input file for the source code to be compiled. 
    Currently in a state to only tokenize, all most.
'''
from optparse import OptionParser
from scanner import Scanner
import characterCompare
from lexicalAnalyzer import LexicalAnalyzer
from parseTree import ParseNode
from parseTree import ParseTree
from IBTLParser import Parser
from token import Token

def scan(srcFilePath):
    myScanner = Scanner(srcFilePath)
    s = ''
    while True:
        char = myScanner.getNextCharacter()
        s = s + char
        if not char:        #This is the EOF character in python
            print s
            break
        
def testCharacterCompare():
    print 'Is Digit:___________________'
    print 'Expected: True,True,False,False,False'
    c =  'Actual: ' + str(characterCompare.isDigit('0')) + ',' + str(characterCompare.isDigit('9')) + ',' + str(characterCompare.isDigit('a'))
    c = c + ',' + str(characterCompare.isDigit('/')) + ',' + str(characterCompare.isDigit(':'))
    print c
    
    print 'Is alpha:___________________'
    print 'Expected: True,True,True,True,False,False,False,False,False'
    c = 'Actual: ' + str(characterCompare.isAlpha('a')) + ',' + str(characterCompare.isAlpha('z')) + ',' + str(characterCompare.isAlpha('Z'))
    c = c + ',' + str(characterCompare.isAlpha('A')) + ',' + str(characterCompare.isAlpha('@')) + ',' + str(characterCompare.isAlpha('['))
    c = c + ',' + str(characterCompare.isAlpha('\'')) + ',' + str(characterCompare.isAlpha('{')) + ',' + str(characterCompare.isAlpha('1'))
    print c
    
    print 'Is Quote:___________________'
    print 'Expected: True,False,False,False'
    c = 'Actual: ' + str(characterCompare.isQuote('"')) + ',' + str(characterCompare.isQuote('\'')) + ',' + str(characterCompare.isQuote('!'))
    c = c + ',' + str(characterCompare.isQuote('#'))
    print c
    
    print 'Is Underscore:___________________'
    print 'Expected: True,False,False,False'
    c = 'Actual: ' + str(characterCompare.isUnderScore('_')) + ',' + str(characterCompare.isUnderScore('-')) + ',' + str(characterCompare.isUnderScore('^')) 
    c = c + ',' + str(characterCompare.isUnderScore('\''))
    print c
    
    print 'Is Keyword:___________________'
    print 'Expected: binop,unop,binop,,'
    c = 'Actual: ' + str(characterCompare.isKeyword('and')) + ',' + str(characterCompare.isKeyword('!')) + ',' + str(characterCompare.isKeyword('^')) 
    c = c + ',' + str(characterCompare.isKeyword('\'')) + ',' + str(characterCompare.isKeyword('ANd'))
    print c
    
def lexicalAnalyzer(myFile):
    myLexicalAnalyzer = LexicalAnalyzer(myFile)
    for x in myLexicalAnalyzer.tokenList:
        x.printToken()
    # myLexicalAnalyzer.tokenize()

def testParseTree():
    token1 = Token('test',1,0)
    token2 = Token('test',2,0)
    token3 = Token('test',3,0)
    token4 = Token('test',4,0)
    token5 = Token('test',5,0)
    rootNode = ParseNode(token5)
    Node1 = ParseNode(token1)
    Node2 = ParseNode(token2)
    Node3 = ParseNode(token3)
    Node4 = ParseNode(token4)
    rootNode.addChild(Node3)
    rootNode.addChild(Node4)
    Node3.addChild(Node1)
    Node3.addChild(Node2)
    
    # expected traversal is 1,2,3,4,5 
    
    myTree = ParseTree(rootNode)
    myNode = myTree.getNextLeftMostNode()
    while myNode :
        myNode.getToken().printToken()
        myNode = myTree.getNextLeftMostNode()
        
def testParser(start, end):
    for x in range(start, end+1) :
        filepath = "TestFiles/ParserTestFiles/test" +  str(x)
        print '\n\n ' + filepath
        try:
            parse(filepath, True, False, False)
        except:
            print "Failed"
            
def testSemanticParser(start, end):
    for x in range(start, end+1) :
        filepath = "TestFiles/SemanticParserTestFiles/Test" +  str(x) + '.txt'
        print '\n\n ' + filepath
        try:
            parse(filepath, False, True, False)
        except:
            print "Failed"
            
def testGFourthOutput(start, end):
    for x in range(start, end+1) :
        filepath = "TestFiles/SemanticParserTestFiles/Test" +  str(x) + '.txt'
        print '\n\n ' + filepath
        try:
            parse(filepath, False, True, True)
        except:
            print "Failed"

def testFinalBatch(start, end):
    for x in range(start, end+1) :
        filepath = "TestFiles/FinalTestBatchSemantics/Test" +  str(x) + '.txt'
        print '\n\n ' + filepath
        try:
            parse(filepath, False, True, True)
        except:
            print "Failed"
                        
            
def parse(myFile, printTree, checkSemantics, genGFourth):
    myLexicalAnalyzer = LexicalAnalyzer(myFile)
    myParser = Parser(myLexicalAnalyzer, checkSemantics, genGFourth)
    myNode = myParser.parseTree.getNextLeftMostNode()
    if printTree:
        while myNode :
            myNode.getToken().printToken()
            myNode = myParser.parseTree.getNextLeftMostNode()

def main():
    parser = OptionParser("usage: %prog [options] arg1")
    parser.add_option("-s", "--source", dest="SrcFilePath",
                      type="string", default='',
                      help="Input source file path")
    parser.add_option("-d", "--debug", dest="DebugMode",
                      type="string", default='',
                      help="Debug Mode y:''")
    (options, args) = parser.parse_args()
    
    if not len(args) <= 1:
        parser.error("Incorrect number of arguments provided")
    
    if options.DebugMode :
        # These Test cases need valid input either supplied directly or via input
        # scan(options.SrcFilePath)
#         testCharacterCompare()
#         printBreak()
#         testParseTree()
#         printBreak()
#         # lexicalAnalyzer(options.SrcFilePath)
#         # parse(options.SrcFilePath)
#         testParser(1, 48)
#         printBreak()
#         testSemanticParser(1, 54)
#         printBreak()
#        testGFourthOutput(1,60)
        testFinalBatch(1,61)
        printBreak()
    else :
        parse(options.SrcFilePath, False, True, True)
    
def printBreak():
    print '_________________________________________________________________________________________'
if __name__ == '__main__':
    main()


    